// Copyright (C) 2018 - Sebastien Alaiwan <sebastien.alaiwan@gmail.com>
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.

#include "engine/src/3ds.h"
#include "tests.h"

unittest("3ds: simple mesh")
{
  static const uint8_t input[] =
  {
    0x4d, 0x4d, 0x9d, 0x01, 0x00, 0x00, 0x02, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x3d, 0x3d, 0x8d, 0x01, 0x00, 0x00, 0x00, 0x40,
    0x87, 0x01, 0x00, 0x00, 0x43, 0x75, 0x62, 0x65,
    0x00, 0x00, 0x41, 0x7c, 0x01, 0x00, 0x00, 0x10,
    0x41, 0x98, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00,
    0x00, 0x80, 0xbf, 0x00, 0x00, 0x80, 0xbf, 0x00,
    0x00, 0x80, 0xbf, 0x00, 0x00, 0x80, 0xbf, 0x00,
    0x00, 0x80, 0xbf, 0x00, 0x00, 0x80, 0x3f, 0x00,
    0x00, 0x80, 0xbf, 0x00, 0x00, 0x80, 0x3f, 0x00,
    0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00,
    0x00, 0x80, 0xbf, 0x00, 0x00, 0x80, 0xbf, 0x00,
    0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00,
    0x00, 0x80, 0xbf, 0x00, 0x00, 0x80, 0x3f, 0x00,
    0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x54,
    0x98, 0x72, 0x3e, 0x00, 0x00, 0x80, 0xbf, 0x00,
    0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00,
    0x00, 0x80, 0xbf, 0x54, 0x98, 0x72, 0x3e, 0x00,
    0x00, 0x80, 0x3f, 0x54, 0x98, 0x72, 0xbe, 0x00,
    0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0xbf, 0x06,
    0x39, 0xc5, 0x3e, 0x00, 0x00, 0x80, 0xbf, 0x00,
    0x00, 0x80, 0xbf, 0x00, 0x00, 0x80, 0x3f, 0x06,
    0x39, 0xc5, 0xbe, 0x06, 0x39, 0xc5, 0xbe, 0x00,
    0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0xbf, 0x20,
    0x41, 0xa8, 0x00, 0x00, 0x00, 0x14, 0x00, 0x04,
    0x00, 0x0b, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a,
    0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x0a,
    0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x09, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0b,
    0x00, 0x04, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0b,
    0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07,
    0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
    0x00, 0x04, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05,
    0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x05,
    0x00, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06,
    0x00, 0x07, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08,
    0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x01, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09,
    0x00, 0x0a, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x09,
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x02, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x0a, 0x00, 0x09, 0x00, 0x00, 0x00, 0x60,
    0x41, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
    0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
    0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
    0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00
  };

  auto mesh = tds::load(input);
  assertEquals(1u, mesh.size());
  assertEquals("Cube", mesh[0].name);
  assertEquals(12u, mesh[0].vertices.size());
  assertEquals(20u, mesh[0].faces.size());
}

